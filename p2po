#!/usr/bin/env python3
import os
import sys
import ast
import json
import yaml
import docker
import logging
import argparse
import subprocess
import ansible_runner
from pathlib import Path
from collections import defaultdict
# custom modules
import src.s3_api
import src.observatory
import src.terraform_api


logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))
client = docker.from_env()



def is_valid_file(parser, filepath):
    """
    Checks the existence of a file and throws an ArgumentParser errror
    if the file does not exist.

    :param parser: the ArgumentParser instance
    :param filepath: the path of the file to check
    :return: the filepath if it exists
    """
    if not os.path.exists(filepath):
        parser.error("The file '{}' does not exist!".format(filepath))
    else:
        return filepath # return an open file handle


def parse_tf_state(tf_state_file):
    """
    Parses the terraform state file and extracts the public IPs of the instances
    and the path to the SSH key which is encoded as instance tag
    
    :param tf_state_file: the path to the terraform state file
    :return: the set of public IPs and the path to the SSH key file
    """
    public_ips = set()
    keypath = False
    result = subprocess.run(['terraform', 'apply', '--auto-approve'], stdout=subprocess.PIPE)
    if result.returncode == 0 and os.path.isfile(tf_state_file):
        # Parse the terraform state to extract the instance details
        with open("terraform.tfstate") as fin:
            tf_state = json.load(fin)
            for resource in tf_state["resources"]:
                if resource["type"] == "aws_instance":
                    for instance in resource["instances"]:
                        public_ip = instance["attributes"]["public_ip"]
                        public_ips.add(public_ip)
                elif resource["type"] == "aws_key_pair":
                    for instance in resource["instances"]:
                        keypath = instance["attributes"]["tags"]["Key"]
    return (public_ips, keypath)


def create_ansible_inventory(public_ips, keypath):
    """
    Creates an ansible inventory for the hosts created by terraform
    
    :param public_ips: the set of public IPs
    :param keypath: the path to the SSH key for the hosts
    :return: True if operation is successful, False otherwise
    """
    try:
        success = False
        # Create the ansible-runner inventory directory
        Path("ansible/inventory").mkdir(parents=True, exist_ok=True)

        # Create the ansible hosts file
        with open("ansible/inventory/hosts", "wt") as fout:
            fout.write("[probes]")
            for ip in public_ips:
                fout.write("\n{} ansible_user=ubuntu ansible_ssh_private_key_file={}".format(ip, keypath))
            success = True
    except OSError as e:
        logging.error("Error while tyring to create the ansible inventory file: {}\n".format(str(e)))
    return success


def create_ansible_extravars(variables_tf_json, image_name):
    """
    Creates the file that stores the Ansible extravar variables
    
    :param variables_tf_json: dictionary with the terraform variables
    :param image_name: the name of the docker image
    :return: True if operation is successful, False otherwise
    """
    success = False
    try:
        # Create the ansible working directory
        Path("ansible/env").mkdir(parents=True, exist_ok=True)
        
        access_key = variables_tf_json["variable"]["access_key"]["default"]
        secret_key = variables_tf_json["variable"]["secret_key"]["default"]
        metrics_s3_bucket = variables_tf_json["variable"]["s3_bucket_name"]["default"]
        container_name = image_name.split(":")[0].split("/")[1]
        
        with open("ansible/env/extravars", "wt") as fout:
            fout.write("---\n")
            fout.write("docker_img: {}\n".format(image_name))
            fout.write("container_name: {}\n".format(container_name))
            fout.write("aws_access_key: {}\n".format(access_key))
            fout.write("aws_secret_key: {}\n".format(secret_key))
            fout.write("bucket_name: {}\n".format(metrics_s3_bucket))
        success = True
        
    except OSError as e:
        logging.error("Error while tyring to create the ansible inventory file: {}\n".format(str(e)))
    except KeyError as e:
        logging.error("Could not find required information to set the measurement variables")
    return success


if __name__ == '__main__':

    description = 'Deploy a measurement to the P2P observatory'
    parser = argparse.ArgumentParser(description=description)
    # Add the permitted arguments
    group = parser.add_mutually_exclusive_group(required=True)
    parser.add_argument('-m', '--manifest',
                        type=lambda x: is_valid_file(parser, x),
                        required=False,
                        default="config.toml",
                        help="Path to manifest file")
    
    group.add_argument('--deploy',
                        action="store_true",
                        default=False,
                        help="Deploy a new experiment")
    group.add_argument('--destroy',
                       action="store_true",
                       default=False,
                       help="Destroy the resources of a deployed experiment")
    args = parser.parse_args()
    
    if not args.deploy:
        sys.exit(-1)
    
    
    obs = src.observatory.Observatory()
    tf_api = src.terraform_api.TerraformApi()

    parsed_toml, plan, docker_settings = obs.parse_toml_manifest(args.manifest)
    if len(parsed_toml) > 0:
        main_tf_created = tf_api.compile_main_tf(parsed_toml["aws"]["servers"])
        if main_tf_created:
            variables_tf_json = tf_api.compile_obs_variables_tf(parsed_toml)
            if variables_tf_json:
                logging.info("Creating requested resources.")
                src.s3_api.create_bucket(parsed_toml["aws"]["metrics_s3_bucket"])
            else:
                sys.exit(-1)
        else:
            sys.exit(-1)
    else:
        sys.exit(-1)

    result = subprocess.run(['terraform', 'init'], stdout=subprocess.PIPE)
    if result.returncode == 0:
        tf_state_file = "terraform.tfstate"
        public_ips, keypath = parse_tf_state(tf_state_file)
        if keypath and len(public_ips) > 0:
            image_name = "{}/{}:{}".format(docker_settings["hub_username"], plan["name"], plan["version"])
            if create_ansible_inventory(public_ips, keypath) and create_ansible_extravars(variables_tf_json, image_name):
                logging.info("Building docker image '{}'".format(image_name))
                script_path = os.path.dirname(os.path.realpath(__file__))
                ansible_path = os.path.join(script_path, "ansible")
                os.chdir(plan["app_directory"])

                with open("plan_executable.sh", "wt") as fout:
                    fout.write("#!/usr/bin/env bash\n")
                    fout.write("./{}\n".format(plan["command"]))
                    fout.write("aws s3 sync output_data_crawls/ s3://$bucketname\n")

                with open("Dockerfile", "wt") as fout:
                    fout.write("FROM vgiotsas/p2p-observatory-base\n")
                    fout.write("LABEL stage=builder\n")
                    fout.write("WORKDIR /app\n")
                    fout.write("ADD . .\n")
                    for builder in plan["builder"]:
                        if builder == "go":
                            fout.write("RUN make build\n")
                        elif builder == "python3":
                            fout.write("RUN python3 -m pip install -r requirements.txt\n")
                    fout.write("WORKDIR /app\n")
                    fout.write("ADD . .\n")
                    fout.write("ENV SHELL /bin/bash\n")
                    fout.write("RUN chmod +x ./{}\n".format(plan["executable"]))
                    fout.write("RUN chmod +x ./plan_executable.sh\n")
                    fout.write("RUN chmod +x ./aws_sync\n")
                    fout.write('CMD ["./plan_executable.sh"]')
                
                try:
                    output = client.images.build(path='/home/ubuntu/ipfs-crawler', tag=image_name, rm=True)
                    output_lines = list()
                    for l in output[1]:
                        output_lines.append(l)
                    
                    img = client.images.get(image_name)
                    assert img.tag(image_name)
                    
                    logging.info("Uploading image to DockerHub")
                    
                    if "hub_password" in docker_settings:
                        resp = client.login(
                          username=docker_settings["hub_username"],
                          password=docker_settings["hub_password"]
                        )
                    elif "dockercfg_path" in docker_settings:
                        resp = client.login(
                            username=docker_settings["hub_username"],
                            dockercfg_path=docker_settings["dockercfg_path"]
                        )
                    else:
                        home_dir = os.getenv('HOME')
                        dockercfg_file = os.path.join(home_dir, ".docker/config.json")
                        resp = client.login(username=docker_settings["hub_username"],
                            dockercfg_path=dockercfg_file
                        )
                        
                    p = client.images.push(os.path.join(image_name), stream=True, decode=True)

                    for l in p:
                        output_lines.append(l)
                    # clean-up build
                    client.images.remove(image_name, force=True)
                    logging.info("Deploying measurement to instances")
                    r = ansible_runner.run(private_data_dir=ansible_path, playbook='observatory.yaml')
                    print("{}: {}".format(r.status, r.rc))
                    print("Final status:")
                    print(r.stats)
                except docker.errors.BuildError as e:
                    logging.error("Error while building the docker image:\n{}\n".format(e))
                except docker.errors.APIError as e:
                    logging.error("Error while tyring to push the docker image to DockerHub:\n{}\n".format(e))
        else:
            logging.error("Terraform apply failed.")
    else:
        logging.error("Terraform init failed.")


